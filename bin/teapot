#!/usr/bin/env ruby

# Copyright, 2012, by Samuel G. D. Williams. <http://www.codeotaku.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'teapot/config'

require 'uri'
require 'rake'
require 'rainbow'

$app = Rake.application = Rake::Application.new
$app.init('teapot')

VARIANT = ENV['VARIANT'] || 'debug'

case VARIANT
when 'debug'
	GLOBAL_CFLAGS = "-O0 -g -Wall -Wmissing-prototypes -pipe"
	GLOBAL_CXXFLAGS = "-std=c++11"
	GLOBAL_LDFLAGS = "-g"
when 'release'
	GLOBAL_CFLAGS = "-O2 -Wall -ffast-math -fno-strict-aliasing -pipe"
	GLOBAL_CXXFLAGS = "-std=c++11"
	GLOBAL_LDFLAGS = ""
end

def run(*args)
	$stderr.puts args.join(' ')
	system(*args.collect{|arg| arg.to_s})
end

task :fetch do
	config = Teapot::Config.load
	context = Teapot::Context.new(config)
	
	base_uri = URI(config.options[:source].to_s + '/')
	
	config.records.each do |record|
		destination_path = record.destination_path
		
		$stderr.puts "Fetching #{record}...".color(:blue)
		
		unless File.exist? destination_path
			$stderr.puts "Cloning package at path #{destination_path} ...".color(:green)
			
			source_uri = URI(record.uri)
		
			unless source_uri.absolute?
				source_uri = base_uri + source_uri
			end
		
			if source_uri.scheme == "file"
				source_uri = source_uri.path
			end
		
			sh("git", "clone", "--recursive", source_uri.to_s, destination_path.to_s)
		else
			$stderr.puts "Updating package at path #{destination_path} ...".color(:green)
			
			Dir.chdir(destination_path) do
				sh("git", "pull")
				sh("git", "submodule", "update", "--init")
			end
		end
	end
end

task :build do
	config = Teapot::Config.load
	context = Teapot::Context.new(config)
	
	config.records.each do |record|
		destination_path = record.destination_path
		
		bundles = record.load(context)
		
		bundles.each do |bundle|
			
		end
	end
end

task :build do |task, arguments|
	config = Teapot::Config.load
	context = Teapot::Context.new(config)
	
	config.records.each do |record|
		destination_path = record.destination_path
		
		record.load(context)
	end

	build_package = ENV['PACKAGE']
	build_platform = ENV['PLATFORM']
	
	if build_package
		package = context.packages[build_package]
		
		unless package
			puts "Could not find package #{build_package}"
			
			next
		end
		
		packages = [package]
	else
		packages = context.packages.values
	end
	
	if build_platform
		platform = context.platforms[build_platform.to_sym]
		
		unless platform
			puts "Could not find platform #{build_platform}"
			
			next
		end
		
		platforms = [platform]
	end
	
	unless ENV['ONLY']
		ordered = Teapot::Package.build_order(context.packages, packages)
	else
		ordered = packages
	end
	
	puts "Building: #{ordered.join(', ')} for variant #{VARIANT}"
	
	context.platforms.each do |name, platform|
		next unless platform.available?
		
		platform.prepare!
		
		ordered.each do |package|
			package.build!(platform, :variant => VARIANT)
		end
	end
end

task :list do
	config = Teapot::Config.load
	context = Teapot::Context.new(config)
	
	config.records.each do |record|
		destination_path = record.destination_path
		
		record.load(context)
	end
	
	ordered = Teapot::Package::build_order(context.packages, context.packages.values)
	
	ordered.each do |package|
		puts "Package: #{package.name}"
		
		if package.depends.size > 0
			puts "	(depends on #{package.depends.join(', ')})"
		end
	end
	
	context.platforms.each do |platform|
		puts "Platform: #{platform.name}"
	end
end

task :help do
	$stderr.puts "To create a new teapot, use the setup task:"
	$stderr.puts "$ #{File.basename($0)} setup project-path"
end

task :default => :help

$app.top_level
